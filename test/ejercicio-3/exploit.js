const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Ejercicio 3", function () {

  let deployer, usuario, atacante;

  beforeEach(async function () {

    [deployer, usuario, atacante] = await ethers.getSigners();

    // Deployamos el contrato con la cuenta "deployer"
    const Vault = await ethers.getContractFactory("VaultV2", deployer);
    this.vault = await Vault.deploy();

    // La cuenta "deployer" deposita 10 ETH
    await this.vault.deposit({ value: ethers.utils.parseEther('10') });
    
    expect(
        await this.vault.deposits(deployer.address)
    ).to.eq(ethers.utils.parseEther('10'));

    expect(
        await ethers.provider.getBalance(this.vault.address)
    ).to.eq(ethers.utils.parseEther('10'));
  });

  describe('Desde una EOA', function () {

    it('Se puede depositar', async function () {
        await this.vault.connect(usuario).deposit({
            value: ethers.utils.parseEther('1')
        });
        expect(
            await this.vault.deposits(usuario.address)
        ).to.eq(ethers.utils.parseEther('1'));
    });

    it('Se puede retirar', async function () {
        await this.vault.connect(usuario).deposit({
            value: ethers.utils.parseEther('1')
        });
        await this.vault.connect(usuario).withdraw();
        expect(
            await this.vault.deposits(usuario.address)
        ).to.eq(ethers.utils.parseEther('0'));
    });
  });
  
  describe('Desde un contrato', function () {
    
    beforeEach(async function () {
        const Depositor = await ethers.getContractFactory("Depositor", usuario);
        this.contratoUsuario = await Depositor.deploy(this.vault.address);
    });

    it("Se puede depositar", async function () {
        await this.contratoUsuario.depositToVault({
            value: ethers.utils.parseEther('3')
        });

        expect(
            await this.vault.deposits(this.contratoUsuario.address)
        ).to.eq(ethers.utils.parseEther('3'));
    });

    it("Se puede retirar", async function () {
        await this.contratoUsuario.depositToVault({
            value: ethers.utils.parseEther('3')
        });

        expect(
            await this.vault.deposits(this.contratoUsuario.address)
        ).to.eq(ethers.utils.parseEther('3'));

        await this.contratoUsuario.withdrawFromVault();

        expect(
            await this.vault.deposits(this.contratoUsuario.address)
        ).to.eq(ethers.utils.parseEther('0'));
    });
  });  
});
